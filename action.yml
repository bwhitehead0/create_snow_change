name: create_snow_change
description: Create ServiceNow CHG ticket
author: bwhitehead0
inputs:
  # ! confirm these, copilot auto-generated the inputs
  snow_url:
    description: ServiceNow URL (e.g., https://my-company.service-now.com)
    required: true
  snow_user:
    description: ServiceNow username (Username + password or token are required)
    required: true
  snow_password:
    description: ServiceNow password (Username + password or token are required)
    required: true
  snow_client_id:
    description: "ServiceNow Client ID for oAuth Token auth (Required: User + pass + client ID + client secret)"
    required: false
  snow_client_secret:
    description: "ServiceNow Client Secret for oAuth Token auth (Required: User + pass + client ID + client secret)"
    required: false
  snow_ci:
    # ? set to not required and default to expecting a convention of variable set in the repo or org (or workflow)?
    description: ServiceNow CI (Configuration Item) name
    required: true
  # ? possible for future, add category. possible values: Accessory Application Computer Database Facility Mobile Device Network Printer Server Storage Other DevOps, maybe others? back end script should default to 'Application' for now
  change_type:
    # TODO: implement in script
    description: Type of change (Normal, Emergency, Standard)
    required: false
  change_title:
    description: 'Title of the change (ServiceNow field: short_description)'
    required: true
  change_description:
    description: 'Description of the change (ServiceNow field: description)'
    required: true
  change_impact:
    # TODO: implement in script
    description: Impact of the change (High, Medium, Low)
    required: false
  change_risk:
    # TODO: implement in script
    description: Risk level of the change (High, Medium, Low)
    required: false
  debug:
    description: Enable debug output
    required: false
    default: false
  # change_schedule_start:
  #   # seems to follow format yyyy-MM-dd'T'HH:mm:ssZ?
  #   # in script, set default to now + 30sec? in future, add to input from action and workflow_dispatch inputs?
  #   description: Scheduled start date and time for the change (YYYY-MM-DD HH:mm:ss)
  #   required: false
  # change_schedule_end:
  #   # seems to follow format yyyy-MM-dd'T'HH:mm:ssZ?
  #   # in script, set default to now + 30sec? in future, add to input from action and workflow_dispatch inputs?
  #   description: Scheduled end date and time for the change (YYYY-MM-DD HH:mm:ss)
  #   required: false
  change_assigned_to:
    # TODO: implement in script
    description: User to assign the change to (defaults to current GitHub user)
    required: false
    default: ${{ github.actor }}
  snow_timeout:
    description: "Timeout for ServiceNow API call (default: 60)"
    required: false
    default: 60
  # response_type:
  #   description: "Type of response to return (full, short)"
  #   required: false
  #   default: "short"
outputs:
  # confirm the output value naming convention. individual output for CHG, sys_id, and full JSON response?
  # TODO: update outputs in steps section to parse 'change_ticket_number' and 'change_ticket_sys_id' from 'response', and add 'response' output
  change_ticket_number:
    description: The number of the created change ticket
    value: ${{ steps.create_change.outputs.change_ticket_number }}
  change_ticket_sys_id:
    description: The sys_id of the created change ticket
    value: ${{ steps.create_change.outputs.change_ticket_sys_id }}
  response:
    description: The full JSON response from the ServiceNow API
    value: ${{ steps.create_change.outputs.response }}
runs:
  using: composite
  steps:
    - name: Create ServiceNow Change Ticket
      id: create_change
      # TODO: add optional/TBD inputs
      run: |
        response=$(${{ github.action_path }}/assets/create_snow_change.sh \
        -c "${{ inputs.snow_ci }}" \
        -l "${{ inputs.snow_url }}" \
        -d "${{ inputs.change_description }}" \
        -s "${{ inputs.change_title }}" \
        -u "${{ inputs.snow_user }}" \
        -p "${{ inputs.snow_password }}" \
        -t "${{ inputs.snow_token }}" \
        -o "${{ inputs.snow_timeout }}" \
        -C "${{ inputs.snow_client_id }}" \
        -S "${{ inputs.snow_client_secret }}" \
        -D "${{ inputs.debug }}")

        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "change_ticket_sys_id=$(echo $response | jq -r '.result.sys_id.value')"
          echo "change_ticket_number=$(echo $response | jq -r '.result.number.value')"
        fi

        echo "change_ticket_sys_id=$(echo $response | jq -r '.result.sys_id.value')" >> $GITHUB_OUTPUT
        echo "change_ticket_number=$(echo $response | jq -r '.result.number.value')" >> $GITHUB_OUTPUT
        echo "response=$response" >> $GITHUB_OUTPUT

      shell: bash

branding:
  icon: "cloud-snow"
  color: "orange"